const { handleRichMenu } = require('../../richmenu-manager/richMenuHandler');
const { writeUserDataToExcel } = require("../utils/excelWriter");
const { sendReplyMessage, getUserProfile } = require('../utils/lineApiHelpers');
const { setCarouselMessage, createImageMessage, createVideoMessage, buildEmojiMessage } = require('../utils/messageTemplates');
const { textMessages, mediaMessages, textTemplates, emojiMap } = require('../../richmenu-manager/data/messages');
const axios = require('axios');
const messages = require('../../richmenu-manager/data/messages');


// ///////////////////////////////////////////
// event„Çø„Ç§„Éó„ÅßÂá¶ÁêÜ„ÇíÊåØ„ÇäÂàÜ„Åë„Çã
async function handleEvent(event, ACCESS_TOKEN) {
  switch (event.type) {
    case 'message':
      await handleMessageEvent(event, ACCESS_TOKEN);
      break;
    case 'postback':
      await handlePostbackEvent(event, ACCESS_TOKEN);
      break;
    case 'follow':
      await handleFollowEvent(event, ACCESS_TOKEN);
      break;
    case 'unfollow':
    	break;
    default:
      console.log('Unhandled event type:', event.type);
  }
}


// ///////////////////////////////////////////
// follow„Ç§„Éô„É≥„Éà„ÅÆÂá¶ÁêÜ
async function handleFollowEvent(event, ACCESS_TOKEN) {
  let mBody;
  let message = [];
	
	const userId = event.source.userId;
  const groupId = event.source.groupId || null;
  
  const profile = await getUserProfile(userId, ACCESS_TOKEN);
  
  const { displayName, pictureUrl, statusMessage } = profile;
  
  // Êõ∏„ÅçËæº„ÅøÂá¶ÁêÜ
  writeUserDataToExcel(groupId, userId, displayName, pictureUrl, statusMessage);
  
  const followText  = textTemplates["msgFollow"];
  
  // dispayName„ÅÆ‰∏≠„Å´$„Åå„ÅÇ„Å£„Åü„ÇâË°®Á§∫„Åó„Å™„ÅÑ(ÁµµÊñáÂ≠ó„ÅÆÊï∞„Å®‰ΩçÁΩÆ„Å´ÁãÇ„ÅÑ„ÅåÂá∫„ÇãÁÇ∫)
	if (displayName == null || displayName.includes("$")) {
  	mBody = followText;
	} else {
  	mBody = `${displayName}„Åï„Çì„ÄÅ${followText}`;
	}
  
  try {
		// ÁµµÊñáÂ≠ó‰ªò„Åç„ÉÜ„Ç≠„Çπ„Éà„ÇíÁµÑ„ÅøÁ´ã„Å¶„Çã
  	const emojiTextMessage = buildEmojiMessage("msgFollow", mBody);
    message = emojiTextMessage;
  } catch (error) {
    console.warn(`followÁµµÊñáÂ≠ó„É°„ÉÉ„Çª„Éº„Ç∏„ÅÆÊßãÁØâÂ§±Êïó: ${error.message}`);
    // „Ç®„É©„ÉºÊôÇ„ÅØÁ∞°Êòì„É°„ÉÉ„Çª„Éº„Ç∏„ÇíÈÄÅ„Çã
    message = { type: "text", text: "„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü„ÄÇ" };
  }
  
  await sendReplyMessage(event.replyToken, [message], ACCESS_TOKEN);
}


// ///////////////////////////////////////////
// message„Ç§„Éô„É≥„Éà„ÅÆÂá¶ÁêÜ
async function handleMessageEvent(event, ACCESS_TOKEN) {
  let message = [];
  const data = event.message.text;
  
  // „Ç≥„Éû„É≥„Éâ„É©„Ç§„É≥„Åã„ÇâÂÖ•Âäõ„Åó„Åü„Å®„Åç„Åì„Åì„Å´Êù•„Çã
  if (data == "„ÉØ„Ç§„ÉØ„Ç§" ) {
    message = { type: "text", text: messages.msgY };
  }
  else {  
    // „Ç≥„Éû„É≥„Éâ„É©„Ç§„É≥„Åã„Çâ‰Ωï„ÅãÂè©„Åè„Å®„É°„ÉÉ„Çª„Éº„Ç∏„Å®„Åó„Å¶ÈÄöÁü•„Åï„Çå„Çã
    // Âïè„ÅÑÂêà„Çè„Åõ„ÅØÂèó„Åë‰ªò„Åë„Å¶„Å™„ÅÑ„ÅÆ„Åß„Ç®„É©„Éº„Å´„Åô„Çã
    message = { type: "text", text: messages.msgPostpone };
  }
  
  await sendReplyMessage(event.replyToken, [message], ACCESS_TOKEN);
  
  return;
}




// ////////////////////////////////////////////////////
// postback„Ç§„Éô„É≥„ÉàÔºö„É™„ÉÉ„ÉÅ„É°„Éã„É•„Éº„ÅÆ„Çø„ÉÉ„ÉóÂá¶ÁêÜ„Å∏ÂßîË≠≤
async function handlePostbackEvent(event, ACCESS_TOKEN) {

  // ÊúÄÂàù„Ååtap_richMenu„ÅßÂßã„Åæ„Çã„Å™„Çâ„É™„ÉÉ„ÉÅ„É°„Éã„É•„Éº„Çí„Çø„ÉÉ„Éó„Åó„Åü„Å®„ÅÑ„ÅÜ„Åì„Å®
  if (event.postback.data.startsWith("tap_richMenu"))  { 
    await handleRichMenuTap(event.postback.data, event.replyToken, ACCESS_TOKEN);
    return;
  } 
  
  // „Çø„ÉñÂàá„ÇäÊõø„Åà„ÅåËµ∑„Åç„Åü„Å®„ÅÑ„ÅÜ„ÅäÁü•„Çâ„Åõ(Áâπ„Å´‰Ωï„ÇÇ„Åó„Å™„ÅÑ)
  if ( event.postback.data == "change to A" 
    || event.postback.data == "change to B" ) {
     return; 
  }

}


// ///////////////////////////////////////////////
// „É™„ÉÉ„ÉÅ„É°„Éã„É•„Éº„Çø„ÉÉ„Éó„ÅÆ„Éê„ÉÉ„ÉÅÂá¶ÁêÜ
async function handleRichMenuTap(data, replyToken, ACCESS_TOKEN) {
  let messages = [];
  
  console.log("üîç postback data:", data, "ÔºàÂûã:", typeof data, "Ôºâ");
  
  // ÁîªÂÉè„ÄÅÂãïÁîª„É°„ÉÉ„Çª„Éº„Ç∏„Å´„Éû„ÉÉ„ÉÅ„Åô„Çã„ÅãÔºü
  if (mediaMessages[data]) {
  	messages = mediaMessages[data];
	}
	
  // „ÉÜ„Ç≠„Çπ„Éà„É°„ÉÉ„Çª„Éº„Ç∏„Å´„Éû„ÉÉ„ÉÅ„Åô„Çã„ÅãÔºü
  else if (textMessages[data]) {
    messages.push({ type: "text", text: textMessages[data] });
    console.log("ÈÄÅ‰ø°‰∫àÂÆö„ÉÜ„Ç≠„Çπ„Éà: ", textMessages[data]);
  } 
  
	// „Ç´„É´„Éº„Çª„É´„É°„ÉÉ„Çª„Éº„Ç∏Â∞ÇÁî®Âá¶ÁêÜ
	else if (data == "tap_richMenuA4") {
		console.log("üéØ tap_richMenuA4 „Éû„ÉÉ„ÉÅ„Åó„Åæ„Åó„Åü");
  	await setCarouselMessage(replyToken, ACCESS_TOKEN);
  	return;
  }
  
  // ÁµµÊñáÂ≠ó„Å´„Éû„ÉÉ„ÉÅ„Åô„Çã„ÅãÔºü
  try {
		if (textTemplates[data]) {
			// ÁµµÊñáÂ≠ó‰ªò„Åç„ÉÜ„Ç≠„Çπ„Éà„ÇíÁµÑ„ÅøÁ´ã„Å¶„Çã
  	  const emojiTextMessage = buildEmojiMessage(data,"");
    	messages.push(emojiTextMessage);
    }
  } catch (error) {
    console.warn(`PoskbackÁµµÊñáÂ≠ó„É°„ÉÉ„Çª„Éº„Ç∏„ÅÆÊßãÁØâÂ§±Êïó: ${error.message}`);
  }
  
  if (messages.length === 0) {
    console.warn(`Poskback„ÅßÊÉÖÂ†±„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„Åß„Åó„Åü: ${data.toString()}`);
  }
  
  
  // „Åæ„Å®„ÇÅ„Å¶1Âõû„ÅÆAPI„É™„ÇØ„Ç®„Çπ„Éà„ÅßËøî‰ø°
  if (messages.length > 0) {
		console.log("Reply Token:", replyToken);
		console.log("ÈÄÅ‰ø°„É°„ÉÉ„Çª„Éº„Ç∏:", JSON.stringify(messages, null, 2));
		await sendReplyMessage(replyToken, messages, ACCESS_TOKEN);
  }
}


module.exports = {
  handleEvent,
  handleFollowEvent,
  handleMessageEvent,
  handlePostbackEvent,
  handleRichMenuTap
};

